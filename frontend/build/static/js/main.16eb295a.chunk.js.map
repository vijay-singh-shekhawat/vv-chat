{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","logo.png","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","theme.js","index.js"],"names":["Login","useState","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","history","useHistory","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","push","description","response","message","spacing","bg","id","isRequired","value","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","maxW","centerContent","d","justifyContent","w","m","borderRadius","borderWidth","fontSize","fontFamily","src","logo","alt","isFitted","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","base","icon","View","isCentered","flexDir","alignItems","boxSize","md","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","color","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","ENDPOINT","document","domain","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","emoji","setEmoji","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","onEmojiClick","emojiObject","aria-label","Click","val","Search","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","initialColorMode","useSystemColorMode","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.16eb295a.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    // console.log(email, password);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      // console.log(JSON.stringify(data));\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack  spacing=\"10px\" bg=\"gray.900\" >\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"myguest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\"  bg=\"gray.900\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","export default __webpack_public_path__ + \"static/media/logo.5e0a5e4b.png\";","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\nimport logo from \"../logo.png\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"black\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n          <img src={logo} alt=\"logo\"/>\n        </Text>\n      </Box>\n      <Box  bg=\"gray.900\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast ,InputGroup} from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon,SearchIcon} from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport Picker from 'emoji-picker-react';\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = document.domain==='localhost'?\"http://localhost:5000\":\"https://vv-chat-mini.herokuapp.com/\" // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const [emoji, setEmoji] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n  const onEmojiClick = (event, emojiObject) => {\n    console.log(emojiObject);\n    setNewMessage(value => value + emojiObject.emoji);\n  };\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n               { emoji && <Picker  onEmojiClick={onEmojiClick} />}\n              <InputGroup>\n              <IconButton aria-label='Search database'  color=\"gray.900\" Click={()=>{setEmoji(val => !val)}} icon={<SearchIcon />} />\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                color=\"gray.900\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n              </InputGroup>\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n                color: \"black\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction }) => {\n  const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"gray.700\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"gray.900\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport logo from \"../../logo.png\"\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"gray.700\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          <img src={logo} alt=\"logo\" />\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// theme.js\r\n\r\n// 1. import `extendTheme` function\r\nimport { extendTheme } from '@chakra-ui/react'\r\n\r\n// 2. Add your color mode config\r\nconst config = {\r\n  initialColorMode: 'dark',\r\n  useSystemColorMode: false,\r\n}\r\n\r\n// 3. extend the theme\r\nconst theme = extendTheme({ config })\r\n\r\nexport default theme","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { ColorModeScript } from '@chakra-ui/react'\nimport theme from './theme'\n\nReactDOM.render(\n  <ChakraProvider theme={theme}> \n    <BrowserRouter>\n      <ChatProvider>\n     \n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}